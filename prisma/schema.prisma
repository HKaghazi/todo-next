// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String?           @unique
  emailVerified DateTime?         @map("email_verified")
  image         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  accounts      Account[]
  sessions      Session[]
  workspaces    Workspace[]
  memberOf      WorkspaceMember[]
  todos         Todo[]

  @@map("users")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @map("user_id") @db.ObjectId
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String?  @map("user_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_requests")
}

model Workspace {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  userId           String?           @map("user_id") @db.ObjectId
  user             User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  workspaceMembers WorkspaceMember[]
  todos            Todo[]

  @@map("workspaces")
}

model WorkspaceMember {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  joinAt DateTime @default(now())

  workspaceId String?    @map("workspace_id") @db.ObjectId
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      String?    @map("user_id") @db.ObjectId
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

model Todo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  checked   Boolean  @default(false)
  content   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String?    @map("created_by_id") @db.ObjectId
  createdBy   User?      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  workspaceId String?    @map("workspace_id") @db.ObjectId
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("todos")
}
